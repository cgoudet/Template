#include <iostream>
#include "Template/Template.h"
#include "Template/ChiMatrix.h"
#include "TFile.h"
#include "TCanvas.h"
#include "Template/SideFunctions.h"
#include <boost/program_options.hpp>
#include <fstream>


using std::cout;
using std::endl;
using std::vector;
namespace po = boost::program_options;
using std::ifstream;

string FindDefaultTree( TFile* inFile );
void Style_Christophe();

int main( int argc, char* argv[] ) {
  po::options_description desc("LikelihoodProfiel Usage");


  unsigned int nIteration;
  vector< double > inputValues;
  vector< unsigned int > inputStat;

  vector<string> dataFileNames, MCTreeNames, MCFileNames, dataTreeNames;
  vector<double> dataWeights, MCWeights;
  string  outFileName , constVarFit, configFile;
  string loadTemplateFileName, saveTemplateFileName, loadFullFileName;
  string correctAlphaFileName, correctAlphaHistName, correctSigmaFileName, correctSigmaHistName;
  int closureMatrix;
  //define all options in the program
  desc.add_options()
    ("help", "Display this help message")
    ("dataFileName", po::value<vector<string>>(&dataFileNames)->multitoken(), "1 : Input data file name")
    ("dataTreeName", po::value<vector<string>>(&dataTreeNames)->multitoken(), "Input Data Tree Name" )
    ("dataWeights", po::value<vector<double>>(&dataWeights)->multitoken(), "Input Data Weights" )
    ("MCFileName", po::value<vector<string>>(&MCFileNames)->multitoken(), "1 : Input MC file name")
    ("MCTreeName", po::value<vector<string>>(&MCTreeNames)->multitoken(), "Input MC Tree Name" )
    ("MCWeights", po::value<vector<double>>(&MCWeights)->multitoken(), "Input MC Weights" )
    ("outFileName", po::value<string>(&outFileName)->default_value("ConfigurationsCTree.root"), "Output file name")
    ("saveTemplate", po::value<string>(&saveTemplateFileName)->default_value("")->implicit_value( "" ), "Root file for template saving" )
    ("loadTemplate", po::value<string>(&loadTemplateFileName), "In put template file name" )
    ("noExtraction", "Switch off extraction of scale factors")    
    ("configFile", po::value<string>(&configFile), "Select the configuration file")
    ("loadFull", po::value<string>(&loadFullFileName), "Name of te root file to load")
    ("makePlot", "Create the results plots" )
    ("closureMatrix", po::value<int>(&closureMatrix)->default_value(0)->implicit_value(1), "" )
    ("correctAlphaFileName", po::value<string>(&correctAlphaFileName), "")
    ("correctAlphaHistName", po::value<string>(&correctAlphaHistName), "")
    ("correctSigmaFileName", po::value<string>(&correctSigmaFileName), "")
    ("correctSigmaHistName", po::value<string>(&correctSigmaHistName), "")
    ("nIteration", po::value<unsigned int>(&nIteration)->default_value(1), "" )   
    ("inputValues", po::value<vector<double>>(&inputValues)->multitoken(), "" )
    ("inputStat", po::value<vector<unsigned int>>(&inputStat)->multitoken(), "" )
   ;


  // Create a map vm that contains options and all arguments of options       
  po::variables_map vm;
  po::store(po::command_line_parser(argc, argv).options(desc).style(po::command_line_style::unix_style ^ po::command_line_style::allow_short).run(), vm);
  po::notify(vm);
  
  if (vm.count("help")) {cout << desc; return 0;}
  //===================================================
  Style_Christophe();
  int err = 0;

  double sigma, errSigma, inputC;
  unsigned int iConf, jConf, statConf, statTree,indepDistorded, indepTemplates;


  TFile *outFile = new TFile( outFileName.c_str() );
  TTree *outTree = new TTree( "ConfiguratiosnCTree","ConfigurationsCTree" );
  outTree->Branch( "sigma", &sigma );
  outTree->Branch( "errSigma", &errSigma );
  outTree->Branch( "inputC", &inputC );
  outTree->Branch( "iConf", &iConf );
  outTree->Branch( "jConf", &jConf );
  outTree->Branch( "statConf", &statConf );
  outTree->Branch( "statTree", &statTree );
  outTree->Branch( "indepDistorded", &indepDistorded );
  outTree->Branch( "indepTemplates", &indepTemplates );


  for ( unsigned int iInput = 0; iInput < inputValues.size(); iInput++ ) {
    for ( unsigned int iStat = 0; iStat < inputStat.size(); iStat++ ) {
      for ( unsigned int iIteration = 0; iIteration < nIteration; iIteration++ ) {
	
	Template TempDistorded( outFileName, configFile, {}, {}, {}, dataFileNames, dataTreeNames, dataWeights );
	Setting &settingDistorded = TempDistorded.GetSetting();
	indepDistorded = settingDistorded.GetIndepDistorded();
	indepTemplates = settingDistorded.GetIndepTemplates();
	inputC = inputValues[iInput];
	statTree = settingDistorded.GetNUseEvent();
	TempDistorded.CreateDistordedTree( "MC_distorded.root" );

	Template TempMeasure( outFileName, configFile, {"MC_distorded.root"}, {""}, {1}, MCFileNames, MCTreeNames, MCWeights  );
	err = TempMeasure.CreateTemplate();
	if ( err ) {
	  cout << "Template::CreateTemplate failed : " << err << endl;
	  return 6;
	}
	
	err = TempMeasure.ExtractFactors( closureMatrix );
	if ( err ) {
	  cout << "Template::Extraction failed : " << err << endl;
	  return 1;0
	}

	unsigned int nBins = settingDistorded.GetEtaBins().size();
	for ( unsigned int i1 = 0; i1 < nBins; i1++ ) {
	  for ( unsigned int i2 = 0; i2 <=i1; i2++ ) {

	  }
	}
      }
    }
  }

  outFile->cd();
  outTree->Write();
  outFile->Close();
  return 0;

}
