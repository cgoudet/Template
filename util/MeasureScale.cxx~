#include <iostream>
#include "Template/Template.h"
#include "Template/ChiMatrix.h"
#include "TFile.h"
#include "TCanvas.h"
#include "Template/SideFunctions.h"
#include <boost/program_options.hpp>
#include <fstream>

using std::cout;
using std::endl;
using std::vector;
namespace po = boost::program_options;
using std::ifstream;

void Style_Christophe();

int main( int argc, char* argv[] ) {
  po::options_description desc("LikelihoodProfiel Usage");

  //define all options in the program
  string dataFileName, outFileName , MCTreeName, MCFileName, dataTreeName, constVarFit;
  string loadTemplateFileName;
  string saveTemplateFileName;
  string loadFullFileName;
  ifstream ifs( "Config.boost", ifstream::in );

  desc.add_options()
    ("help", "Display this help message")
    ("dataFileName", po::value<string>(&dataFileName), "1 : Input data file name")
    ("dataTreeName", po::value<string>(&dataTreeName), "Input Data Tree Name" )
    ("MCFileName", po::value<string>(&MCFileName), "1 : Input MC file name")
    ("MCTreeName", po::value<string>(&MCTreeName), "Input MC Tree Name" )
    ("outFileName", po::value<string>(&outFileName)->default_value("TestResults.root"), "Output file name")
    ("saveTemplate", po::value<string>(&saveTemplateFileName), "Root file for template saving" )
    ("loadTemplate", po::value<string>(&loadTemplateFileName), "In put template file name" )
    ("noExtraction", "Switch off extraction of scale factors")    
    //    ("configFile", po::value<string>(&configFile), "Select the configuration file")
    ("loadFull", po::value<string>(&loadFullFileName), "Name of te root file to load")
    ("makePlot", "Create the results plots" )
    ("ZMassMin", "Value of minimum in mass distribution" )
;

  // create a map vm that contains options and all arguments of options       
  po::variables_map vm;
  po::store(parse_config_file(ifs, desc), vm);
  po::store(po::command_line_parser(argc, argv).options(desc).style(po::command_line_style::unix_style ^ po::command_line_style::allow_short).run(), vm);
  po::notify(vm);
  
  if (vm.count("help")) {cout << desc; return 0;}
  //########################################
  // Style_Christophe();
  // int err = 0;

  // TFile *dataInputFile = 0, *MCInputFile = 0;
  // TTree *dataInputTree = 0, *MCInputTree = 0;

  // if ( vm.count( "dataFileName" ) && vm.count( "dataTreeName" ) ) {  
  //  dataInputFile = TFile::Open( dataFileName.c_str() );
  //  dataInputTree = (TTree*) dataInputFile->Get( dataTreeName.c_str() );
  // }

  // if ( vm.count( "MCFileName" ) && vm.count( "MCTreeName" ) ) {
  //  MCInputFile = TFile::Open( MCFileName.c_str() );
  //  MCInputTree = (TTree*) MCInputFile->Get( MCTreeName.c_str() );
  // }

  // Template Temp( outFileName, configFile, dataInputTree, MCInputTree );

  // if ( vm.count("loadFull") ) {
  //   err = Temp.Load( loadFullFileName, false);
  //   if ( err ) {
  //     cout << "Template::LoadFull failed : " << err << endl;
  //     return 3;
  //   }}

  // else  if ( vm.count( "loadTemplate" ) ) {
  //   err = Temp.Load( loadTemplateFileName, true );
  //   if ( err ) {
  //     cout << "Template::LoadTemplate failed : " << err << endl;
  //     return 4;
  //   }} 

  // else Temp.CreateTemplate();



  // if ( vm.count( "saveTemplate" ) )   Temp.Save( saveTemplateFileName, true );  

  // if ( !vm.count( "noExtraction" ) )  {
  //   err = Temp.ExtractFactors();
  //   if ( err ) {
  //     cout << "Template::Extraction failed : " << err << endl;
  //     return 1;
  //   }}

  // err = Temp.Save("",false);
  // if ( err ) {
  //   cout << "Template::Save failed : " << err << endl;
  //   return 2;
  // }

  // if ( vm.count("makePlot") )  Temp.MakePlot();

  return 0;
}
